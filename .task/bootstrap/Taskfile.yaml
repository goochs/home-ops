---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_DIR: "{{.KUBERNETES_DIR}}/bootstrap/talos"
  TALHELPER_SECRET_FILE: "{{.TALOS_DIR}}/talsecret.yaml"
  TALHELPER_SECRET_TEMPLATE: "{{.TALOS_DIR}}/talsecret.tmpl.yaml"
  TALHELPER_CONFIG_FILE: "{{.TALOS_DIR}}/talconfig.yaml"
  TALOSCONFIG: "{{.TALOS_DIR}}/clusterconfig/talosconfig"

tasks:

  default:
    desc: Bootstrap the Talos cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: gensecret
      - task: genconfig
      - task: apply
      - task: install
      - task: fetch-kubeconfig
      - task: apps
      - talosctl health --server=false

  gensecret:
    desc: Generate the Talos secrets
    dir: "{{.TALOS_DIR}}"
    cmds:
      - op inject -i "{{.TALHELPER_SECRET_TEMPLATE}}" -o "{{.TALHELPER_SECRET_FILE}}"
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
    status:
      - test -f "{{.TALHELPER_SECRET_FILE}}"

  apply:
    desc: Apply the Talos configs to the nodes in maintenance mode, using insecure
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  install:
    desc: Install the Talos cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - echo "Installing Talos... ignore the errors and be patient"
      - until talhelper gencommand bootstrap | bash; do sleep 10; done
      - sleep 10
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  apps:
    desc: Bootstrap core apps needed for Talos
    dir: "{{.TALOS_DIR}}"
    cmds:
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kubeconfig {{.KUBECONFIG_FILE}} --file ./apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    preconditions:
      - { msg: "Missing kubeconfig", sh: "test -f {{.KUBECONFIG_FILE}}" }

  fetch-kubeconfig:
    desc: Generate talos kubeconfig
    dir: "{{.TALOS_DIR}}"
    cmd: until talhelper gencommand kubeconfig --extra-flags "{{.ROOT_DIR}} --force" | bash; do sleep 10; done

