---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_DIR: "{{.KUBERNETES_DIR}}/bootstrap/talos"
  TALHELPER_SECRET_FILE: "{{.TALOS_DIR}}/talsecret.yaml"
  TALHELPER_SECRET_TEMPLATE: "{{.TALOS_DIR}}/talsecret.tmpl.yaml"
  TALHELPER_CONFIG_FILE: "{{.TALOS_DIR}}/talconfig.yaml"
  TALOSCONFIG: "{{.TALOS_DIR}}/clusterconfig/talosconfig"

env:
  TALOSCONFIG: '{{.TALOSCONFIG}}'

tasks:

  apply:
    desc: Apply Talos configs to the nodes normally
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand apply | bash
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  genconfig:
    desc: Generate the Talos configs
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper genconfig --secret-file {{.TALHELPER_SECRET_FILE}}
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talhelper secret file", sh: "test -f {{.TALHELPER_SECRET_FILE}}" }

  upgrade-node:
    desc: Upgrade Talos on a single node [HOSTNAME=required]
    cmds:
      - task: down
      - talosctl --nodes {{.HOSTNAME}} upgrade --image="factory.talos.dev/installer{{if eq .TALOS_SECUREBOOT "true"}}-secureboot{{end}}/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --timeout=10m
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - task: up
    vars:
      TALOS_SCHEMATIC_ID:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath='{.metadata.annotations.extensions\.talos\.dev/schematic}'
      TALOS_SECUREBOOT:
        sh: talosctl --nodes {{.HOSTNAME}} get securitystate --output=jsonpath='{.spec.secureBoot}'
      TALOS_VERSION:
        sh: yq '.talosVersion' {{.TALHELPER_CONFIG_FILE}}
    requires:
      vars: [HOSTNAME]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/{{.TALOS_VERSION}}
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null
      - talosctl config info &>/dev/null
      - test -f {{.TALOSCONFIG}}
      - which kubectl talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmd: talosctl --nodes {{.KUBERNETES_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      KUBERNETES_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALHELPER_CONFIG_FILE}}
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/{{.KUBERNETES_VERSION}}
      - talosctl --nodes {{.KUBERNETES_CONTROLLER}} get machineconfig &>/dev/null
      - talosctl config info &>/dev/null
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  soft-nuke:
    desc: Resets nodes back to maintenance mode so you can re-deploy again straight after
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash

  hard-nuke:
    desc: Resets nodes back completely and reboots them
    prompt: This will destroy your cluster and reset the nodes... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --graceful=false --wait=false" | bash

  down:
    internal: true
    cmd: flux --namespace flux-system suspend kustomization --all
    preconditions:
      - which flux

  up:
    internal: true
    cmd: flux --namespace flux-system resume kustomization --all
    preconditions:
      - which flux
