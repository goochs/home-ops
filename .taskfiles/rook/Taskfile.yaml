---
version: "3"

x-task-vars: &task-vars
  node: "{{.node}}"
  ceph_disk: "{{.ceph_disk}}"
  ts: "{{.ts}}"
  jobName: "{{.jobName}}"

vars:
  waitForJobScript: "../_scripts/wait-for-k8s-job.sh"
  ts: '{{now | date "150405"}}'

tasks:
  wipe-node-knode1:
    desc: Trigger a wipe of Rook-Ceph data on node "knode1"
    cmds:
      - task: wipe-disk
        vars:
          node: "{{.node}}"
          ceph_disk: "/dev/disk/by-id/nvme-SPCC_M.2_PCIe_SSD_AA230711NV01KG23208"
      - task: wipe-data
        vars:
          node: "{{.node}}"
    vars:
      node: knode1

  wipe-node-knode2:
    desc: Trigger a wipe of Rook-Ceph data on node "knode2"
    cmds:
      - task: wipe-disk
        vars:
          node: "{{.node}}"
          ceph_disk: "/dev/disk/by-id/nvme-SPCC_M.2_PCIe_SSD_AA230731NV01KG03651"
      - task: wipe-data
        vars:
          node: "{{.node}}"
    vars:
      node: knode2

  wipe-node-knode3:
    desc: Trigger a wipe of Rook-Ceph data on node "knode3"
    cmds:
      - task: wipe-disk
        vars:
          node: "{{.node}}"
          ceph_disk: "/dev/disk/by-id/nvme-SPCC_M.2_PCIe_SSD_AA230731NV01KG04096"
      - task: wipe-data
        vars:
          node: "{{.node}}"
    vars:
      node: knode3

  wipe-disk:
    desc: Wipe all remnants of rook-ceph from a given disk (ex. task rook:wipe-disk node=knode1 ceph_disk="/dev/nvme0n1")
    silent: true
    internal: true
    cmds:
      - envsubst < <(cat {{.wipeRookDiskJobTemplate}}) | kubectl apply -f -
      - bash {{.waitForJobScript}} {{.wipeCephDiskJobName}} default
      - kubectl -n default wait job/{{.wipeCephDiskJobName}} --for condition=complete --timeout=1m
      - kubectl -n default logs job/{{.wipeCephDiskJobName}} --container list
      - kubectl -n default delete job {{.wipeCephDiskJobName}}
    vars:
      node: '{{ or .node (fail "`node` is required") }}'
      ceph_disk: '{{ or .ceph_disk (fail "`ceph_disk` is required") }}'
      jobName: 'wipe-{{- .node -}}-{{- .ceph_disk | splitList "/" | last | replace replace "/" "-" }}-{{- .ts -}}'
      wipeRookDiskJobTemplate: "WipeDiskJob.tmpl.yaml"
    env: *task-vars
    preconditions:
      - sh: test -f {{.waitForJobScript}}
      - sh: test -f {{.wipeRookDiskJobTemplate}}

  wipe-data:
    desc: Wipe all remnants of rook-ceph from a given disk (ex. task rook:wipe-data node=knode1)
    silent: true
    internal: true
    cmds:
      - envsubst < <(cat {{.wipeRookDataJobTemplate}}) | kubectl apply -f -
      - bash {{.waitForJobScript}} {{.wipeRookDataJobName}} default
      - kubectl -n default wait job/{{.wipeRookDataJobName}} --for condition=complete --timeout=1m
      - kubectl -n default logs job/{{.wipeRookDataJobName}} --container list
      - kubectl -n default delete job {{.wipeRookDataJobName}}
    vars:
      node: '{{ or .node (fail "`node` is required") }}'
      jobName: "wipe-rook-data-{{- .node -}}-{{- .ts -}}"
      wipeRookDataJobTemplate: "WipeRookDataJob.tmpl.yaml"
    env: *task-vars
    preconditions:
      - sh: test -f {{.waitForJobScript}}
      - sh: test -f {{.wipeRookDataJobTemplate}}
