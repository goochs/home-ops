---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      version: 70.10.0
  dependsOn:
    - name: prometheus-operator-crds
      namespace: observability
    - name: longhorn
      namespace: storage
  install:
    crds: Skip
    remediation:
      retries: 3
  interval: 30m
  timeout: 15m
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      retries: 3
      strategy: rollback
  values:
    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerHubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
    alertmanager:
      alertmanagerSpec:
        alertManagerConfiguration:
          name: alertmanager
        alertmanagerConfigMatcherStrategy:
          type: None
        externalUrl: https://alertmanager.serek.xyz
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 5Gi
              storageClassName: longhorn
      ingress:
        enabled: true
        hosts: ["alertmanager.serek.xyz"]
        ingressClassName: internal
        pathType: Prefix
    cleanPrometheusOperatorObjectNames: true
    crds:
      enabled: false
    grafana:
      enabled: false
      forceDeployDashboards: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - deployments=[*]
        - persistentvolumeclaims=[*]
        - pods=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubeApiServer:
      serviceMonitor:
        selector:
          k8s-app: kube-apiserver
    kubeControllerManager: &kubeControllerManager
      service:
        selector:
          k8s-app: kube-controller-manager
    kubeEtcd:
      !!merge <<: *kubeControllerManager
    kubeProxy:
      enabled: false
    kubeScheduler:
      service:
        selector:
          k8s-app: kube-scheduler
    prometheus:
      ingress:
        enabled: true
        hosts: ["prometheus.serek.xyz"]
        ingressClassName: internal
        pathType: Prefix
      prometheusSpec:
        enableAdminAPI: true
        enableFeatures:
          - memory-snapshot-on-shutdown
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 14d
        retentionSize: 50GB
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 60Gi
              storageClassName: longhorn
        walCompression: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
